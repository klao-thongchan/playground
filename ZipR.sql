-- Section 1
-- 1.2.3. answer
CREATE TABLE CUS_BEHAVE
SELECT
    DISTINCT(CUST_ID), 
    SUM(NET_AMT) AS REVENUE,
    CASE
        WHEN COUNT(DISTINCT TRANS_ID) > 10 
        THEN FOU = 'HIGH'
        WHEN COUNT(DISTINCT TRANS_ID) > 5 AND COUNT(DISTINCT <= 10)
        THEN FOU = 'MEDIUM'
        ELSE FOU = 'LOW'
    END AS FOU,
    RENT_TYPE,
    PRICE_PLAN
FROM ITEM_FCT
;

-- 4. answer
CREATE TABLE MOST_POP_SCOOTER
SELECT
    SCOOTER_ID, 
    COUNT(SCOOTER_ID)  AS TOP_PICKED
FROM ITEM_FCT
ORDER BY COUNT(SCOOTER_ID) DESC
;

-- 5. answer
CREATE TABLE FIRST_PICKED_SCOOTER
SELECT 
    SCOOTER_ID
    COUNT(SCOOTER_ID)  AS FIRST_PICKED
FROM ITEM_FCT
ORDER BY DATE ASC
;

-- 6. answer
CREATE TABLE MOST_POP_INSURANCE
SELECT
    INSURANCE_PACKAGE,
    COUNT(INSURANCE_PACKAGE) AS TOP_PICKED
FROM ITEM_FCT
WHERE RENT_TYPE = 'MONTH'
;

-- 7. answer
CREATE TABLE ROI_FCT AS ROI
SELECT
    CUST_ID,
    SUM(NET_AMT) AS REVENUE,
    SUM(COST) AS COST,
    SUM(NET_AMT) - SUM(COST) AS ROI
FROM ITEM_FCT
GROUP BY CUST_ID
;

-- Section 2
SELECT 
    DISTINCT TRANS_ID
FROM PRODTRANS
WHERE TRANS_ID = TRANS_ID AND PROD_ID < PROD_ID
GROUP BY TRANS_ID

-- Section 3
-- 1. answer
SELECT *
FROM A
LEFT JOIN B ON (A.CUST_ID = B.CUST_ID)
;

-- 2. answer
SELECT *
FROM A
RIGHT JOIN B ON (A.CUST_ID = B.CUST_ID)
;

-- 3. answer
CREATE TABLE TOTAL_CUST
SELECT *
FROM A
UNION ALL B ON (A.CUST_ID = B.CUST_ID)
;

-- 4. answer
CREATE TABLE CUST_A
SELECT *
FROM A
LEFT JOIN B ON (A.CUST_ID = B.CUST_ID)
;

CREATE TABLE CUST_B
SELECT *
FROM B
LEFT JOIN A ON (B.CUST_ID = A.CUST_ID)
;