{"version":3,"sources":["../src/registry.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PromptAction } from '@genkit-ai/ai';\nimport { GenkitError } from '@genkit-ai/core';\nimport { lookupAction } from '@genkit-ai/core/registry';\nimport { existsSync, readdir, readFileSync } from 'fs';\nimport { basename, join, resolve } from 'path';\nimport { Dotprompt } from './prompt.js';\n\nexport function registryDefinitionKey(name: string, variant?: string) {\n  return `dotprompt/${name}${variant ? `.${variant}` : ''}`;\n}\n\nexport function registryLookupKey(name: string, variant?: string) {\n  return `/prompt/${registryDefinitionKey(name, variant)}`;\n}\n\nexport async function lookupPrompt(\n  name: string,\n  variant?: string,\n  dir: string = './prompts'\n): Promise<Dotprompt> {\n  // Expect to find the prompt in the registry\n  const registryPrompt = (await lookupAction(\n    registryLookupKey(name, variant)\n  )) as PromptAction;\n  if (registryPrompt) {\n    return Dotprompt.fromAction(registryPrompt);\n  } else {\n    // Handle the case where initialization isn't complete\n    // or a file was added after the prompt folder was loaded.\n    return maybeLoadPrompt(dir, name, variant);\n  }\n}\n\nasync function maybeLoadPrompt(\n  dir: string,\n  name: string,\n  variant?: string\n): Promise<Dotprompt> {\n  const expectedFileName = `${name}${variant ? `.${variant}` : ''}.prompt`;\n  const promptFolder = resolve(dir);\n  const promptExists = existsSync(join(promptFolder, expectedFileName));\n  if (promptExists) {\n    return loadPrompt(promptFolder, expectedFileName);\n  } else {\n    throw new GenkitError({\n      source: 'dotprompt',\n      status: 'NOT_FOUND',\n      message: `Could not find '${expectedFileName}' in the prompts folder.`,\n    });\n  }\n}\n\nexport async function loadPromptFolder(\n  dir: string = './prompts'\n): Promise<void> {\n  const promptsPath = resolve(dir);\n  return new Promise<void>((resolve, reject) => {\n    if (existsSync(promptsPath)) {\n      readdir(\n        promptsPath,\n        {\n          withFileTypes: true,\n          recursive: false,\n        },\n        (err, dirEnts) => {\n          if (err) {\n            reject(err);\n          } else {\n            dirEnts.forEach(async (dirEnt) => {\n              if (dirEnt.isFile() && dirEnt.name.endsWith('.prompt')) {\n                loadPrompt(dirEnt.path, dirEnt.name);\n              }\n            });\n            resolve();\n          }\n        }\n      );\n    } else {\n      resolve();\n    }\n  });\n}\n\nexport function loadPrompt(path: string, filename: string): Dotprompt {\n  let name = basename(filename, '.prompt');\n  let variant: string | null = null;\n  if (name.includes('.')) {\n    const parts = name.split('.');\n    name = parts[0];\n    variant = parts[1];\n  }\n  const source = readFileSync(join(path, filename), 'utf8');\n  const prompt = Dotprompt.parse(name, source);\n  if (variant) {\n    prompt.variant = variant;\n  }\n  prompt.define();\n  return prompt;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,kBAA4B;AAC5B,sBAA6B;AAC7B,gBAAkD;AAClD,kBAAwC;AACxC,oBAA0B;AAEnB,SAAS,sBAAsB,MAAc,SAAkB;AACpE,SAAO,aAAa,IAAI,GAAG,UAAU,IAAI,OAAO,KAAK,EAAE;AACzD;AAEO,SAAS,kBAAkB,MAAc,SAAkB;AAChE,SAAO,WAAW,sBAAsB,MAAM,OAAO,CAAC;AACxD;AAEA,SAAsB,aACpB,MACA,SACA,MAAc,aACM;AAAA;AAEpB,UAAM,iBAAkB,UAAM;AAAA,MAC5B,kBAAkB,MAAM,OAAO;AAAA,IACjC;AACA,QAAI,gBAAgB;AAClB,aAAO,wBAAU,WAAW,cAAc;AAAA,IAC5C,OAAO;AAGL,aAAO,gBAAgB,KAAK,MAAM,OAAO;AAAA,IAC3C;AAAA,EACF;AAAA;AAEA,SAAe,gBACb,KACA,MACA,SACoB;AAAA;AACpB,UAAM,mBAAmB,GAAG,IAAI,GAAG,UAAU,IAAI,OAAO,KAAK,EAAE;AAC/D,UAAM,mBAAe,qBAAQ,GAAG;AAChC,UAAM,mBAAe,0BAAW,kBAAK,cAAc,gBAAgB,CAAC;AACpE,QAAI,cAAc;AAChB,aAAO,WAAW,cAAc,gBAAgB;AAAA,IAClD,OAAO;AACL,YAAM,IAAI,wBAAY;AAAA,QACpB,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,mBAAmB,gBAAgB;AAAA,MAC9C,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAEA,SAAsB,iBACpB,MAAc,aACC;AAAA;AACf,UAAM,kBAAc,qBAAQ,GAAG;AAC/B,WAAO,IAAI,QAAc,CAACA,UAAS,WAAW;AAC5C,cAAI,sBAAW,WAAW,GAAG;AAC3B;AAAA,UACE;AAAA,UACA;AAAA,YACE,eAAe;AAAA,YACf,WAAW;AAAA,UACb;AAAA,UACA,CAAC,KAAK,YAAY;AAChB,gBAAI,KAAK;AACP,qBAAO,GAAG;AAAA,YACZ,OAAO;AACL,sBAAQ,QAAQ,CAAO,WAAW;AAChC,oBAAI,OAAO,OAAO,KAAK,OAAO,KAAK,SAAS,SAAS,GAAG;AACtD,6BAAW,OAAO,MAAM,OAAO,IAAI;AAAA,gBACrC;AAAA,cACF,EAAC;AACD,cAAAA,SAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF;AAAA,MACF,OAAO;AACL,QAAAA,SAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAEO,SAAS,WAAW,MAAc,UAA6B;AACpE,MAAI,WAAO,sBAAS,UAAU,SAAS;AACvC,MAAI,UAAyB;AAC7B,MAAI,KAAK,SAAS,GAAG,GAAG;AACtB,UAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,WAAO,MAAM,CAAC;AACd,cAAU,MAAM,CAAC;AAAA,EACnB;AACA,QAAM,aAAS,4BAAa,kBAAK,MAAM,QAAQ,GAAG,MAAM;AACxD,QAAM,SAAS,wBAAU,MAAM,MAAM,MAAM;AAC3C,MAAI,SAAS;AACX,WAAO,UAAU;AAAA,EACnB;AACA,SAAO,OAAO;AACd,SAAO;AACT;","names":["resolve"]}